parameters:
  python_version: ''
  python_architecture: ''

steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: ${{ parameters.python_version }}
      architecture: ${{ parameters.python_architecture }}
      addToPath: true
    displayName: Use Python ${{ parameters.python_version }}

  - script: |
      echo '##vso[task.setvariable variable=PIPENV_DEFAULT_PYTHON_VERSION]'${{ parameters.python_version }}
    env:
      PYTHON_VERSION: ${{ parameters.python_version }}

  - template: install-dependencies.yml

  - template: create-virtualenv.yml
    parameters:
      python_version: ${{ parameters.python_version }}

  - powershell: |
      subst T: "$env:TEMP"
      Write-Host "##vso[task.setvariable variable=TEMP]T:\"
      Write-Host "##vso[task.setvariable variable=TMP]T:\"
      Write-Host "##vso[task.setvariable variable=PIPENV_DEFAULT_PYTHON_VERSION]$env:PYTHON_VERSION"
      Write-Host "##vso[task.setvariable variable=PIPENV_NOSPIN]1"
    displayName: Fix Temp Variable
    env:
      PYTHON_VERSION: ${{ parameters.python_version }}

  - powershell: |
      git submodule sync
      git submodule update --init --recursive
      Write-Host "Running Command: pipenv run pytest -n 4 --junitxml=test-results.xml --timeout 300 tests/"
      pipenv run pytest -n 4 --junitxml=test-results.xml --timeout 300 tests/
    failOnStderr: false
    displayName: Run integration tests
    env:
      PYTHONWARNINGS: 'ignore:DEPRECATION'
      PIPENV_NOSPIN: '1'
      GIT_SSH_COMMAND: ssh -o StrictHostKeyChecking=accept-new -o CheckHostIP=no
